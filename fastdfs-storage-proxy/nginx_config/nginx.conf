
#user  nobody;
worker_processes  1;

#error_log  logs/error.log debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
	#设置缓存参数  
    server_names_hash_bucket_size 128;  
    client_header_buffer_size 32k;  
    large_client_header_buffers 4 32k;  
    client_max_body_size 300m;  
    tcp_nopush     on;  
    proxy_redirect off;  
    proxy_set_header Host $http_host;  
    proxy_set_header X-Real-IP $remote_addr;  
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  
    proxy_connect_timeout 90;  
    proxy_send_timeout 90;  
    proxy_read_timeout 90;  
    proxy_buffer_size 16k;  
    proxy_buffers 4 64k;  
    proxy_busy_buffers_size 128k;  
    proxy_temp_file_write_size 128k;  
    #设置缓存存储路径、存储方式、分配内存大小、磁盘最大空间、不活动的缓存期限  
    proxy_cache_path /var/cache/nginx/proxy_cache levels=1:2 keys_zone=http-cache:500m max_size=10g inactive=30d;  
    proxy_temp_path /var/cache/nginx/proxy_cache/tmp;  

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

	#设置group1服务器  
    upstream fdfs_group1 {  
        server group1_storage1 weight=1 max_fails=2 fail_timeout=30s;  
        server group1_storage2 weight=1 max_fails=2 fail_timeout=30s;   
    }
	#设置group2服务器  
    upstream fdfs_group2 {  
        server group1_storage1 weight=1 max_fails=2 fail_timeout=30s;  
        server group1_storage2 weight=1 max_fails=2 fail_timeout=30s;   
    }
	
	
    server {
        listen       80;
        server_name  "";
		#设置token加密key
		set $secret "imlzw2017-01-11";
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }
		
		location /test {
			default_type "text/html";
			set_unescape_uri $src $arg_src;
			echo "<img src='$src' width='400px' height='400px' >";
		}
		
		location /group1/M00 {  
			default_type "text/html";
			#判断token是否为空
			if ($arg_token !~ \S+) {
				more_set_headers  'Content-Type:text/plain';
				return 403 "token is invaild!";
				break;
			}
			#判断ts是否为空
			if ($arg_ts !~ \S+) {
				more_set_headers  'Content-Type:text/plain';
				return 403 "ts is invaild!";
				break;
			}
			#获取fileId值
			set $remote_name $uri;
			if ($remote_name ~ /(group1/(M00(.*)+))) {
				set $remote_name $1;
			}
			#计算时间差，正数表示过期，负数表示未过期
			set_by_lua $time "local num = tonumber(ngx.var.arg_ts) if num then return (os.time()-num-100) else return 1 end";
			if ($time !~ ^-){
				more_set_headers 'X-Ts:$time' 'Content-Type:text/plain';
				return 403 "token is out of date!";
				break;
			}
			#计算md5
			set_md5 $hash "$secret|$remote_name|$arg_ts|$arg_et";
			if ($hash != $arg_token){
				more_set_headers 'X-Ts:$time' 'Content-Type:text/plain';
				return 403 "token is invaild!";
				break;
			}
			#设置过期时间
			set $expires 30d;
			if ($arg_et = '1') {
				set $expires 100s;
			}
			proxy_next_upstream http_502 http_504 error timeout invalid_header;  
			proxy_cache http-cache;  
			proxy_cache_valid  200 304 30d; #哪些状态缓存多长时间
			#proxy_cache_valid  any 3s;    #其他的缓存多长时间    
			#proxy_cache_methods GET;  # 默认是get和head
			proxy_cache_key $uri;
			#proxy_cache_min_uses 1; #只要统一个url,在磁盘文件删除之前，总次数访问到达3次，就开始缓存。 
			proxy_pass http://fdfs_group1/M00/;  
			proxy_cache_revalidate on;   
			#proxy_cache_bypass $cookie_nocache $arg_nocache $arg_comment; # 如果任何一个参数值不为空，或者不等于0，nginx就不会查找缓存，直接进行代理转发  
			#access_log  logs/cache.log cache_log;  #增加输出日志
			add_header  X-Cache "$upstream_cache_status";
			add_header  X-Via  $server_addr;
			add_header  X-Ts  $time;
			expires $expires;  
        }  

		location /group2/M00 {  
			default_type "text/html";
			#判断token是否为空
			if ($arg_token !~ \S+) {
				more_set_headers  'Content-Type:text/plain';
				return 403 "token is invaild!";
				break;
			}
			#判断ts是否为空
			if ($arg_ts !~ \S+) {
				more_set_headers  'Content-Type:text/plain';
				return 403 "ts is invaild!";
				break;
			}
			#获取fileId值
			set $remote_name $uri;
			if ($remote_name ~ /(group1/(M00(.*)+))) {
				set $remote_name $1;
			}
			#计算时间差，正数表示过期，负数表示未过期
			set_by_lua $time "local num = tonumber(ngx.var.arg_ts) if num then return (os.time()-num-100) else return 1 end";
			if ($time !~ ^-){
				more_set_headers 'X-Ts:$time' 'Content-Type:text/plain';
				return 403 "token is out of date!";
				break;
			}
			if ($arg_et !~ \S+) {
				set $arg_et 0;
			}
			#计算md5
			set_md5 $hash "$secret|$remote_name|$arg_ts|$arg_et";
			if ($hash != $arg_token){
				more_set_headers 'X-Ts:$time' 'Content-Type:text/plain';
				return 403 "token is invaild!";
				break;
			}
			#设置过期时间
			set $expires 30d;
			if ($arg_et = '1') {
				set $expires 100s;
			}
			proxy_next_upstream http_502 http_504 error timeout invalid_header;  
			proxy_cache http-cache;  
			proxy_cache_valid  200 304 30d; #哪些状态缓存多长时间
			#proxy_cache_valid  any 3s;    #其他的缓存多长时间    
			#proxy_cache_methods GET;  # 默认是get和head
			proxy_cache_key $uri;
			#proxy_cache_min_uses 1; #只要统一个url,在磁盘文件删除之前，总次数访问到达3次，就开始缓存。 
			proxy_pass http://fdfs_group2/M00/;  
			proxy_cache_revalidate on;   
			#proxy_cache_bypass $cookie_nocache $arg_nocache $arg_comment; # 如果任何一个参数值不为空，或者不等于0，nginx就不会查找缓存，直接进行代理转发  
			#access_log  logs/cache.log cache_log;  #增加输出日志
			add_header  X-Cache "$upstream_cache_status";
			add_header  X-Via  $server_addr;
			add_header  X-Ts  $time;
			expires $expires;
        }  
		#设置清除缓存的访问权限  
        location ~ /purge(/.*) {
                allow 127.0.0.1;  
                allow 192.168.16.0/24;  
                allow 172.17.0.0/24;  
                deny all;  
                proxy_cache_purge http-cache  $1;  
        }  
		#负载均衡状态查看
		#location /nstatus {
		#		check_status;
		#		access_log off;
		#		allow 192.168.16.0/24;
		#		allow 172.17.0.0/24;
		#		#deny all;
		#}
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
